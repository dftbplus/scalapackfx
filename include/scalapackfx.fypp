#:mute

#! Set DEBUG to 0 unless DEBUG level is specified explicitely
#:set DEBUG = getvar('DEBUG', 0)

#! Build normal library unless stub library is explicitly requested
#!#:set STUB_LIBRARY = defined('STUB_LIBRARY')

#:set CONTROL_TYPES = ['lead', 'follow']

#:set INT_TYPES = ['int']

#:set REAL_TYPES = ['real', 'dreal']

#:set COMPLEX_TYPES = ['complex', 'dcomplex']

#:set FLOAT_TYPES = REAL_TYPES + COMPLEX_TYPES

#:set LOGICAL_TYPES = ['logical']

#:set CHAR_TYPES = ['char']

#:set NUMERIC_TYPES = INT_TYPES + FLOAT_TYPES

#:set ALL_TYPES = NUMERIC_TYPES + LOGICAL_TYPES + CHAR_TYPES

#:set TYPE_ABBREVS = {'int': 'i', 'real': 's', 'dreal': 'd', 'complex': 'c', 'dcomplex': 'z',&
    & 'logical': 'l', 'char': 'h'}

#! Fortran types
#:set FORTRAN_TYPES = {'int': 'integer', 'real': 'real(sp)', 'dreal': 'real(dp)',&
    & 'complex': 'complex(sp)', 'dcomplex': 'complex(dp)',  'logical': 'logical',&
    & 'char': 'character(len=*)'}

#:set FORTRAN_KINDS = {'real': 'sp', 'dreal': 'dp', 'complex': 'sp',&
    & 'dcomplex': 'dp'}

#! Returns colons within parenthesis according to the RANK or empty string
#! if RANK is zero.
#:def RANKSUFFIX(RANK)
${'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) +')'}$
#:enddef RANKSUFFIX


#! Indicates debug code.
#!
#! code: Code to insert, if DEBUG > 0
#!
#:def DEBUG_CODE(code)
#:if DEBUG > 0
$:code
#:endif
#:enddef DEBUG_CODE


#! Sets a variable (aa) to the value of an optional argument (bb)
#! if present or to a default value (cc) otherwise.
#!
#:def inoptflags(aa,bb,cc)
  if (present(${bb}$)) then
    ${aa}$ = ${bb}$
  else
    ${aa}$ = ${cc}$
  end if
#:enddef


#! Sets an optional output argument (aa) if present to a certain value (bb).
#!
#:def handle_outoptflag(aa, bb)
  if (present(${aa}$)) then
    ${aa}$ = ${bb}$
  end if
#:enddef


#! Allocates an array (aa) to a minimal size (bb) with an actual size
#! stored in (cc). If the optional allocatable argument (dd) is present
#! and big enough, its allocation transfer will be transfered instead of
#! a new allocation.
#!
#:def move_minoptalloc(aa, bb, cc, dd)
  if (present(${dd}$)) then
    if (size(${dd}$) >= ${bb}$) then
      call move_alloc(${dd}$, ${aa}$)
    else
      deallocate(${dd}$)
    end if
  end if
  if (.not. allocated(${aa}$)) then
    allocate(${aa}$(${bb}$))
  end if
  ${cc}$ = size(${aa}$)
#:enddef move_minoptalloc


#! Moves allocation from an array (aa) to an optional target (bb).
#!
#:def optmovealloc(aa, bb)
  if (present(${bb}$)) then
    call move_alloc(${aa}$, ${bb}$)
  end if
#:enddef

#! Asserts the validity of a condition.
#!
#! cond: Condition
#!
#:def ASSERT(COND)
#:call DEBUG_CODE
if (.not. (${COND}$)) then
  call assert_failed("${_FILE_}$", ${_LINE_}$)
end if
#:endcall
#:enddef ASSERT

#:endmute
